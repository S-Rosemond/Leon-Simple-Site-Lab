//camelize(str)
function camelize(str) {
  const newString = str.split("-").map(function (word, index) {
    if (index == 0) {
      return word;
    }
    return word[0].toUpperCase() + word.slice(1);
  });
  return newString.join("");
}

console.log(camelize("my-short-string"));

// Filter range
function filterRange(arr, a, b) {
  const newArray = arr.filter(function (item) {
    return a <= item && item <= b;
  });
  console.log(newArray);
  return newArray;
}

filterRange([5, 3, 8, 1], 1, 4);

// Filter range in place
function filterRangeInPlace(arr, a, b) {
  arr = filterRange(arr, a, b);
  console.log(arr);
}

// sort in descending order
function sortDec(arr) {
  arr.sort((a, b) => b - a);

  console.log(arr);
  return arr;
}

function copySort(arr) {
  const newArray = arr.slice();
  sortDec(newArray);
  return newArray;
}

class myCalculator {
  constructor() {
    this.a = null;
    this.b = null;
  }

  calc(str) {
    str = str.split(" ");
    const operator = str[1];
    this.a = Number(str[0]);
    this.b = Number(str[2]);
    this.output(operator);
  }
  output(operator) {
    switch (operator) {
      case "+":
        console.log(this.a + this.b);
        break;
      case "-":
        console.log(this.a - this.b);
        break;
      case "**":
        console.log(this.a ** this.b);
        break;
      case "/":
        console.log(this.a / this.b);
        break;
    }
  }
}

const myCalc = new myCalculator();
myCalc.calc("2 ** 2");

// Map to names
let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 28 };

let users = [john, pete, mary];
let names = [];

users.forEach((el) => {
  names.push(el.name);
});

console.log(names);

// Map to objects
john = { name: "John", surname: "Smith", id: 1 };
pete = { name: "Pete", surname: "Hunt", id: 2 };
mary = { name: "Mary", surname: "Key", id: 3 };

users = [john, pete, mary];
let mappedUsers = users.map((el) => {
  el.fullName = el.name + " " + el.surname;
  delete el.name;
  delete el.surname;
  return el;
});

console.log(mappedUsers);

// Sort users by age

function sortByAge(users) {
  users.sort((a, b) => a.age - b.age);
  return users;
}

john = { name: "John", age: 25 };
pete = { name: "Pete", age: 30 };
mary = { name: "Mary", age: 28 };

let arr = [pete, john, mary];

console.log(sortByAge(arr));

//Shuffle an array
// generated by copilot/kite reviewed by human
function shuffle(arr) {
  arr.sort(() => Math.random() - 0.5);
  return arr;
}

arr = [1, 2, 3];
console.log(shuffle(arr));
// get average age

function getAverageAge(users) {
  const newArray = [];
  users.forEach((el) => {
    newArray.push(el.age);
  });
  const sum = newArray.reduce((a, b) => a + b);
  result = sum / newArray.length;
  console.log(result);
  return result;
}

john = { name: "John", age: 25 };
pete = { name: "Pete", age: 30 };
mary = { name: "Mary", age: 29 };

arr = [john, pete, mary];

getAverageAge(arr);

// Filter unique array members

function unique(arr) {
  const newArray = new Set(arr);

  const result = [...newArray];
  console.log(result);
  return result;
}

let strings = [
  "Hare",
  "Krishna",
  "Hare",
  "Krishna",
  "Krishna",
  "Krishna",
  "Hare",
  "Hare",
  ":-O",
];

unique(strings);

// Create keyed object from array
function groupById(arr) {
  const newObject = {};
  arr.forEach((el) => {
    newObject[el.id] = el;
  });
  console.log(newObject);
  return newObject;
}

users = [
  { id: "john", name: "John Smith", age: 20 },
  { id: "ann", name: "Ann Smith", age: 24 },
  { id: "pete", name: "Pete Peterson", age: 31 },
];

groupById(users);
